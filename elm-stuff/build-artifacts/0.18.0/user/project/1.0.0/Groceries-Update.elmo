var _user$project$Groceries_Update$never = function (n) {
	never:
	while (true) {
		var _v0 = n;
		n = _v0;
		continue never;
	}
};
var _user$project$Groceries_Update$delayHideList = function (msg) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$identity,
		A2(
			_elm_lang$core$Task$andThen,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Task$succeed(msg)),
			_elm_lang$core$Process$sleep(_elm_lang$core$Time$second * 3)));
};
var _user$project$Groceries_Update$foldAddIngredients = F2(
	function (addedIngredient, ingredientsList) {
		var ingredientInList = function (i) {
			return _elm_lang$core$Native_Utils.eq(i.name, addedIngredient.name) && _elm_lang$core$Native_Utils.eq(i.amount, addedIngredient.amount);
		};
		var ingredientIsInList = A2(_elm_lang$core$List$any, ingredientInList, ingredientsList);
		return ingredientIsInList ? A2(
			_elm_lang$core$List$map,
			function (i) {
				return (_elm_lang$core$Native_Utils.eq(i.name, addedIngredient.name) && _elm_lang$core$Native_Utils.eq(i.amount, addedIngredient.amount)) ? _elm_lang$core$Native_Utils.update(
					i,
					{count: i.count + 1}) : i;
			},
			ingredientsList) : {ctor: '::', _0: addedIngredient, _1: ingredientsList};
	});
var _user$project$Groceries_Update$addIngredients = F2(
	function (pin, ingredientsList) {
		var addedIngredients = A2(
			_elm_lang$core$List$concatMap,
			function (c) {
				return A2(
					_elm_lang$core$List$map,
					function (i) {
						return A4(_user$project$Groceries_Models$Ingredient, i.amount, i.name, c.category, 1);
					},
					c.ingredients);
			},
			pin.ingredients);
		return A3(_elm_lang$core$List$foldl, _user$project$Groceries_Update$foldAddIngredients, ingredientsList, addedIngredients);
	});
var _user$project$Groceries_Update$update = F2(
	function (message, groceryList) {
		var _p0 = message;
		switch (_p0.ctor) {
			case 'AddToGroceryList':
				var updatedIngredientsList = A2(_user$project$Groceries_Update$addIngredients, _p0._0, groceryList.list);
				var updatedCount = _elm_lang$core$List$length(updatedIngredientsList);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{list: updatedIngredientsList, show: true, count: updatedCount}),
					_1: _user$project$Groceries_Update$delayHideList(_user$project$Groceries_Messages$Hide)
				};
			case 'RemoveIngredient':
				var _p1 = _p0._0;
				var updatedIngredientsList = A2(
					_elm_lang$core$List$filter,
					function (i) {
						return (!_elm_lang$core$Native_Utils.eq(i.name, _p1.name)) || (!_elm_lang$core$Native_Utils.eq(i.amount, _p1.amount));
					},
					groceryList.list);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{list: updatedIngredientsList, show: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchResult':
				return {ctor: '_Tuple2', _0: groceryList, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Show':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{show: true, hovering: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'HoverOut':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{show: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var hideList = function () {
					var _p2 = groceryList.hovering;
					if (_p2 === true) {
						return false;
					} else {
						return true;
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{show: !hideList}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
