var _user$project$Groceries_Update$never = function (n) {
	never:
	while (true) {
		var _v0 = n;
		n = _v0;
		continue never;
	}
};
var _user$project$Groceries_Update$delayHideList = function (msg) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$identity,
		A2(
			_elm_lang$core$Task$andThen,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Task$succeed(msg)),
			_elm_lang$core$Process$sleep(_elm_lang$core$Time$second * 3)));
};
var _user$project$Groceries_Update$foldAddIngredients = F2(
	function (addedIngredient, ingredientsList) {
		var ingredientInList = function (i) {
			return _elm_lang$core$Native_Utils.eq(i.name, addedIngredient.name) && _elm_lang$core$Native_Utils.eq(i.amount, addedIngredient.amount);
		};
		var ingredientIsInList = A2(_elm_lang$core$List$any, ingredientInList, ingredientsList);
		return ingredientIsInList ? A2(
			_elm_lang$core$List$map,
			function (i) {
				return (_elm_lang$core$Native_Utils.eq(i.name, addedIngredient.name) && _elm_lang$core$Native_Utils.eq(i.amount, addedIngredient.amount)) ? _elm_lang$core$Native_Utils.update(
					i,
					{count: i.count + 1}) : i;
			},
			ingredientsList) : {ctor: '::', _0: addedIngredient, _1: ingredientsList};
	});
var _user$project$Groceries_Update$addIngredients = F2(
	function (pin, ingredientsList) {
		var addedIngredients = A2(
			_elm_lang$core$List$concatMap,
			function (c) {
				return A2(
					_elm_lang$core$List$map,
					function (i) {
						return A4(_user$project$Groceries_Models$Ingredient, i.amount, i.name, c.category, 1);
					},
					c.ingredients);
			},
			pin.ingredients);
		return A3(_elm_lang$core$List$foldl, _user$project$Groceries_Update$foldAddIngredients, ingredientsList, addedIngredients);
	});
var _user$project$Groceries_Update$translator = F2(
	function (_p0, msg) {
		var _p1 = _p0;
		var _p2 = msg;
		if (_p2.ctor === 'ForSelf') {
			return _p1.onInternalMessage(_p2._0);
		} else {
			return _p1.onAuthError;
		}
	});
var _user$project$Groceries_Update$initSlideout = _elm_lang$core$Native_Platform.outgoingPort(
	'initSlideout',
	function (v) {
		return v;
	});
var _user$project$Groceries_Update$showSlideout = _elm_lang$core$Native_Platform.outgoingPort(
	'showSlideout',
	function (v) {
		return v;
	});
var _user$project$Groceries_Update$update = F2(
	function (message, groceryList) {
		var _p3 = message;
		switch (_p3.ctor) {
			case 'AddToGroceryList':
				var updatedIngredientsList = A2(_user$project$Groceries_Update$addIngredients, _p3._0, groceryList.list);
				var updatedCount = _elm_lang$core$List$length(updatedIngredientsList);
				var updatedModel = _elm_lang$core$Native_Utils.update(
					groceryList,
					{list: updatedIngredientsList, count: updatedCount});
				return {
					ctor: '_Tuple2',
					_0: updatedModel,
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _user$project$Groceries_Update$showSlideout(''),
							_1: {
								ctor: '::',
								_0: _user$project$Groceries_Commands$saveGroceryList(updatedModel),
								_1: {ctor: '[]'}
							}
						})
				};
			case 'RemoveIngredient':
				var _p4 = _p3._0;
				var updatedIngredientsList = A2(
					_elm_lang$core$List$filter,
					function (i) {
						return (!_elm_lang$core$Native_Utils.eq(i.name, _p4.name)) || (!_elm_lang$core$Native_Utils.eq(i.amount, _p4.amount));
					},
					groceryList.list);
				var updatedModel = _elm_lang$core$Native_Utils.update(
					groceryList,
					{list: updatedIngredientsList});
				return {
					ctor: '_Tuple2',
					_0: updatedModel,
					_1: _user$project$Groceries_Commands$saveGroceryList(updatedModel)
				};
			case 'FetchResult':
				var _p5 = _p3._0;
				if (_p5.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _p5._0,
						_1: _user$project$Groceries_Update$initSlideout('')
					};
				} else {
					var authErrorCommands = {
						ctor: '::',
						_0: _user$project$Storage$setAccessToken(''),
						_1: {
							ctor: '::',
							_0: _user$project$Storage$setJwt(''),
							_1: {
								ctor: '::',
								_0: _user$project$Cmd_Extra$message(
									_user$project$Groceries_Messages$ForParent(_user$project$Groceries_Messages$AuthorizationError)),
								_1: {
									ctor: '::',
									_0: _elm_lang$navigation$Navigation$newUrl('/'),
									_1: {ctor: '[]'}
								}
							}
						}
					};
					var _p6 = _p5._0;
					switch (_p6.ctor) {
						case 'Unauthorized':
							return {
								ctor: '_Tuple2',
								_0: groceryList,
								_1: _elm_lang$core$Platform_Cmd$batch(authErrorCommands)
							};
						case 'HttpError':
							var _p7 = _p6._0;
							switch (_p7.ctor) {
								case 'Timeout':
									return {ctor: '_Tuple2', _0: groceryList, _1: _elm_lang$core$Platform_Cmd$none};
								case 'BadStatus':
									return {
										ctor: '_Tuple2',
										_0: groceryList,
										_1: _elm_lang$core$Platform_Cmd$batch(authErrorCommands)
									};
								default:
									return {ctor: '_Tuple2', _0: groceryList, _1: _elm_lang$core$Platform_Cmd$none};
							}
						default:
							return {ctor: '_Tuple2', _0: groceryList, _1: _elm_lang$core$Platform_Cmd$none};
					}
				}
			default:
				return {ctor: '_Tuple2', _0: groceryList, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Groceries_Update$TranslationDictionary = F2(
	function (a, b) {
		return {onInternalMessage: a, onAuthError: b};
	});
