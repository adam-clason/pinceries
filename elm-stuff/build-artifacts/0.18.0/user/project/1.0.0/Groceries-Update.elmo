var _user$project$Groceries_Update$never = function (n) {
	never:
	while (true) {
		var _v0 = n;
		n = _v0;
		continue never;
	}
};
var _user$project$Groceries_Update$delayHideList = function (msg) {
	return A2(
		_elm_lang$core$Task$perform,
		_elm_lang$core$Basics$identity,
		A2(
			_elm_lang$core$Task$andThen,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Task$succeed(msg)),
			_elm_lang$core$Process$sleep(_elm_lang$core$Time$second * 3)));
};
var _user$project$Groceries_Update$ingredientCount = function (ingredientsList) {
	return _elm_lang$core$List$length(
		_elm_lang$core$List$concat(
			A2(
				_elm_lang$core$List$map,
				function (_p0) {
					var _p1 = _p0;
					return _p1._1;
				},
				_elm_lang$core$Dict$toList(ingredientsList))));
};
var _user$project$Groceries_Update$foldCategory = F2(
	function (_p2, ingredientsList) {
		var _p3 = _p2;
		var _p5 = _p3._1;
		var updatedDict = A3(
			_elm_lang$core$Dict$update,
			_p3._0,
			function (value) {
				var _p4 = value;
				if (_p4.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(
						A2(_elm_lang$core$List$append, _p4._0, _p5));
				} else {
					return _elm_lang$core$Maybe$Just(_p5);
				}
			},
			ingredientsList);
		return updatedDict;
	});
var _user$project$Groceries_Update$addCategories = F2(
	function (pin, ingredientsList) {
		var categories = A2(
			_elm_lang$core$List$map,
			function (c) {
				return {
					ctor: '_Tuple2',
					_0: c.category,
					_1: A2(
						_elm_lang$core$List$map,
						function (i) {
							return A2(_user$project$Groceries_Models$Ingredient, i.amount, i.name);
						},
						c.ingredients)
				};
			},
			pin.ingredients);
		return A3(_elm_lang$core$List$foldl, _user$project$Groceries_Update$foldCategory, ingredientsList, categories);
	});
var _user$project$Groceries_Update$update = F2(
	function (message, groceryList) {
		var _p6 = message;
		switch (_p6.ctor) {
			case 'AddToGroceryList':
				var updatedIngredientsList = A2(_user$project$Groceries_Update$addCategories, _p6._0, groceryList.list);
				var updatedCount = _user$project$Groceries_Update$ingredientCount(updatedIngredientsList);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{list: updatedIngredientsList, show: true, count: updatedCount}),
					_1: _user$project$Groceries_Update$delayHideList(_user$project$Groceries_Messages$Hide)
				};
			case 'RemoveIngredient':
				var updatedIngredientsList = _elm_lang$core$Dict$fromList(
					A2(
						_elm_lang$core$List$map,
						function (_p7) {
							var _p8 = _p7;
							return {
								ctor: '_Tuple2',
								_0: _p8._0,
								_1: A2(
									_elm_lang$core$List$filter,
									function (i) {
										return !_elm_lang$core$Native_Utils.eq(i, _p6._0);
									},
									_p8._1)
							};
						},
						_elm_lang$core$Dict$toList(groceryList.list)));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{list: updatedIngredientsList, show: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Show':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{show: true, hovering: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'HoverOut':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{show: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Hide':
				var hideList = function () {
					var _p9 = groceryList.hovering;
					if (_p9 === true) {
						return false;
					} else {
						return true;
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{show: !hideList}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Name':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						groceryList,
						{name: _p6._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: groceryList,
					_1: _user$project$Groceries_Commands$saveGroceryList(groceryList)
				};
		}
	});
